require "scale"

describe Scale::Types do
  before(:all) { 
    Scale::TypeRegistry.instance.load
  }

  it "can decode branch" do
    node_proof = "0x80fffb80fbd313c51ce7764956f81ef87ff3ebc489b3232cfed8fef9a8434b7414d6f7c880760034d4c3469cab2f0c3c5417980460d295fd8b49cff262a4afb8290c38a57b80150154959b53b033e56db6cb65aa2fedca9dd0071f25eae7ba262841eaf0dbbd807adb48ce7c7686a6b1f726eca635aecf163fcb1ec47f7cacec194be9f340d7b1805c72f25b1b6304d16667e2766fa1a906cb081788eb4502787df7c3597412b17b802d39230527f49cf88fbdd4bf7e3dbcd564218ea2c20751ee4e4e24ecb44989a5800eb754c27d6302344f80fc4f785eae09c7c6acf58ee0ebddbd2f1755eb37a7de806246fab7082d42447ff6a3e4653cb8c2427408eae98af0c40f9c636b972f91548034260342013b628b1a3409a53683bd72866b974fc4bb1e2db0b50c4abd88df0680468f4c745f210c713c8eee6d4bc90e15ac9e708974088d1bf5e01db7fc0781bb809d5adec17d1f91d73f0a631ffe17af9dae7007f69f11bc4d46ca2b9777a921688090e4fe33f4b3a304329c97d1ee3cb8240585cd8c4a1da47f79423a1d91dd1d7180a7a88069a098bb5725ce52c5cf702bed3b1f6f134a69f585d43ab497995fd35280cbcdf9de3ff34d475ef3dad95c4217e6ee4a1e40897550291620d88e1a77c2bd806440a709fcb73133283c13668a87da24982f6b61060d169deb5a43532b553318"
    scale_bytes = Scale::Bytes.new(node_proof)
    o = Scale::Types::TrieNode.decode scale_bytes
    expect(o.value).to eql({:node_type=>"branch", :partial=>{:bytes=>[], :padding=>false}, :children=>["0xfbd313c51ce7764956f81ef87ff3ebc489b3232cfed8fef9a8434b7414d6f7c8", "0x760034d4c3469cab2f0c3c5417980460d295fd8b49cff262a4afb8290c38a57b", "0x150154959b53b033e56db6cb65aa2fedca9dd0071f25eae7ba262841eaf0dbbd", "0x7adb48ce7c7686a6b1f726eca635aecf163fcb1ec47f7cacec194be9f340d7b1", "0x5c72f25b1b6304d16667e2766fa1a906cb081788eb4502787df7c3597412b17b", "0x2d39230527f49cf88fbdd4bf7e3dbcd564218ea2c20751ee4e4e24ecb44989a5", "0x0eb754c27d6302344f80fc4f785eae09c7c6acf58ee0ebddbd2f1755eb37a7de", "0x6246fab7082d42447ff6a3e4653cb8c2427408eae98af0c40f9c636b972f9154", "0x34260342013b628b1a3409a53683bd72866b974fc4bb1e2db0b50c4abd88df06", "0x468f4c745f210c713c8eee6d4bc90e15ac9e708974088d1bf5e01db7fc0781bb", nil, "0x9d5adec17d1f91d73f0a631ffe17af9dae7007f69f11bc4d46ca2b9777a92168", "0x90e4fe33f4b3a304329c97d1ee3cb8240585cd8c4a1da47f79423a1d91dd1d71", "0xa7a88069a098bb5725ce52c5cf702bed3b1f6f134a69f585d43ab497995fd352", "0xcbcdf9de3ff34d475ef3dad95c4217e6ee4a1e40897550291620d88e1a77c2bd", "0x6440a709fcb73133283c13668a87da24982f6b61060d169deb5a43532b553318"]})

    node_proof = "0x80490c80b0eadd9230e584b47e00b7cf8e1f927cee0d50485a3c676a11b384ead2bf36ee80bc95ec1b2225e13c653524cb1ff8714173c780ef580581ff66c9604e7fb536c380fda12eddcd0a2e270526fc0037de9da9dcda5c99049e1f74a520c5cbd85db96b8064d657470e1a79e65884b81f1085d11308fd3182d566ffe2b419413ce0495e1980a60aa390511c25e70c1b029d951ef2fd0255b8a3fc3580bed4c4b2fa31789781"
    scale_bytes = Scale::Bytes.new(node_proof)
    o = Scale::Types::TrieNode.decode scale_bytes
    expect(o.value).to eq({:node_type=>"branch", :partial=>{:bytes=>[], :padding=>false}, :children=>["0xb0eadd9230e584b47e00b7cf8e1f927cee0d50485a3c676a11b384ead2bf36ee", nil, nil, "0xbc95ec1b2225e13c653524cb1ff8714173c780ef580581ff66c9604e7fb536c3", nil, nil, "0xfda12eddcd0a2e270526fc0037de9da9dcda5c99049e1f74a520c5cbd85db96b", nil, nil, nil, "0x64d657470e1a79e65884b81f1085d11308fd3182d566ffe2b419413ce0495e19", "0xa60aa390511c25e70c1b029d951ef2fd0255b8a3fc3580bed4c4b2fa31789781", nil, nil, nil, nil]})

    node_proof = "0x9eaa394eea5630e07c48ae0c9558cef7098d585f0a98fdbe9ce6c55837576c60c7af3850100900000080a4adb17d600ad56fb70d03060fc70c9636b53bac26f3d45a525461b3d9fbd8ea80950043f807c1289b7636f6a759abc843caa0f2da40d133ff2fe8821926fd7d93803520a0cde9eee6081349f75cb2771853207aa1b0136c1303677c394d3b2de74880dc4f83e9b8934c4dcffc1d12f846210d0b469982edff3c19c3e89246d9f9b27a705f09cce9c888469bb1a0dceaa129672ef8284820706f6c6b61646f74"
    scale_bytes = Scale::Bytes.new(node_proof)
    o = Scale::Types::TrieNode.decode scale_bytes
    expect(o.value).to eq({:node_type=>"branch", :partial=>{:bytes=>[170, 57, 78, 234, 86, 48, 224, 124, 72, 174, 12, 149, 88, 206, 247], :padding=>false}, :children=>[[95, 10, 152, 253, 190, 156, 230, 197, 88, 55, 87, 108, 96, 199, 175, 56, 80, 16, 9, 0, 0, 0], nil, nil, "0xa4adb17d600ad56fb70d03060fc70c9636b53bac26f3d45a525461b3d9fbd8ea", nil, nil, nil, nil, "0x950043f807c1289b7636f6a759abc843caa0f2da40d133ff2fe8821926fd7d93", nil, "0x3520a0cde9eee6081349f75cb2771853207aa1b0136c1303677c394d3b2de748", "0xdc4f83e9b8934c4dcffc1d12f846210d0b469982edff3c19c3e89246d9f9b27a", nil, nil, nil, [95, 9, 204, 233, 200, 136, 70, 155, 177, 160, 220, 234, 161, 41, 103, 46, 248, 40, 72, 32, 112, 111, 108, 107, 97, 100, 111, 116]]})
  end

  it "can decode leaf" do
    node_proof = "0x5f00d41e5e16056765bc8461851072c9d74505240000000000000080e36a09000000000200000001000000000000000000000000000200000002000000000000ca9a3b00000000020000000300000000030e017b1e76c223d1fa5972b6e3706100bb8ddffb0aeafaf0200822520118a87e00000300000003000e017b1e76c223d1fa5972b6e3706100bb8ddffb0aeafaf0200822520118a87ef0a4b9550b000000000000000000000000000300000003020d584a4cbbfd9a4878d816512894e65918e54fae13df39a6f520fc90caea2fb00e017b1e76c223d1fa5972b6e3706100bb8ddffb0aeafaf0200822520118a87ef0a4b9550b00000000000000000000000000030000000e060017640700000000000000000000000000000300000003045a9ae1e0730536617c67ca727de00d4d197eb6afa03ac0b4ecaa097eb87813d6c005d9010000000000000000000000000000030000000000c0769f0b00000000000000"
    scale_bytes = Scale::Bytes.new(node_proof)
    o = Scale::Types::TrieNode.decode scale_bytes
    expect(o.value).to eq({:node_type=>"leaf", :partial=>{:bytes=>[0, 212, 30, 94, 22, 5, 103, 101, 188, 132, 97, 133, 16, 114, 201, 215], :padding=>true}, :value_bytes=>[36, 0, 0, 0, 0, 0, 0, 0, 128, 227, 106, 9, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 3, 14, 1, 123, 30, 118, 194, 35, 209, 250, 89, 114, 182, 227, 112, 97, 0, 187, 141, 223, 251, 10, 234, 250, 240, 32, 8, 34, 82, 1, 24, 168, 126, 0, 0, 3, 0, 0, 0, 3, 0, 14, 1, 123, 30, 118, 194, 35, 209, 250, 89, 114, 182, 227, 112, 97, 0, 187, 141, 223, 251, 10, 234, 250, 240, 32, 8, 34, 82, 1, 24, 168, 126, 240, 164, 185, 85, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 2, 13, 88, 74, 76, 187, 253, 154, 72, 120, 216, 22, 81, 40, 148, 230, 89, 24, 229, 79, 174, 19, 223, 57, 166, 245, 32, 252, 144, 202, 234, 47, 176, 14, 1, 123, 30, 118, 194, 35, 209, 250, 89, 114, 182, 227, 112, 97, 0, 187, 141, 223, 251, 10, 234, 250, 240, 32, 8, 34, 82, 1, 24, 168, 126, 240, 164, 185, 85, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 14, 6, 0, 23, 100, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 4, 90, 154, 225, 224, 115, 5, 54, 97, 124, 103, 202, 114, 125, 224, 13, 77, 25, 126, 182, 175, 160, 58, 192, 180, 236, 170, 9, 126, 184, 120, 19, 214, 192, 5, 217, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 192, 118, 159, 11, 0, 0, 0, 0, 0, 0, 0]})
  end
end
